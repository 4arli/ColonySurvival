0.6.0 (2018-**-**)

-Basic version of diggers (Much WIP, make an area using the command tool to dig, then place digger jobs from the command tool adjacent to it)
-Added a "crouch" button, which will slow you down and prevent falling off edges (default left control)
-Added more precise collision boxes to most complex objects (beds, crops, torches, job outlines)
-Added a modifier key to hold while recruiting colonists to recruit 15 per click (default left control, "Quick Hire Modifier" in controls menu)
-Removed the "Special Block Removal" warning popup when destroying a warning block
| Warning blocks destroy like any normal block now. "Hidden" blocks will re-appear while destroying them.
| Popup still appears if clicking on them with the command tool
-Disabled remove area popup when digging through blocks below an area - click it while holding the command tool instead

-Taught farmers how to farm on a place with existing crops
-Taught farmers to abandon their farm if one of their ground blocks is removed or changed to something non-fertile
-Disable Eye Adaptation setting if hardware/drivers don't support it (requires shader model 5 / compute shaders)
-The area selected during the 'area removal popup' is now sort of transparent to show up more clearly
-Fixed an issue where colonists could run into a circle, where they're switching between 2 crates thinking they get closer each time.
| Should also somewhat improve crate finding (i.e, they won't swap incorrectly for a further away crate when halfway)
-Fix colonists missing items to take a job (i.e, pickaxe, axe, slings etc) displaying a ? instead of the item as missing
-Fixed 0.5.1+ changelog dates being in 2017
-Fixed modded locales falling back to the clients' en-US instead of the server one
-Fixed an issue where a world used for both singleplayer and multiplayer would return the singleplayer player in multiplayer for Players.TryMatchName (yey edge cases)
-Changed npc eating to be more random (they get 70%-130% of the food value) in order to spread their eating moments throughout the day
-Changed npc hunger to try and maintain a minimum 3 hours of food instead of 1 hour minimum
-Changed npc hunger to eat up to 10 hours of food, instead of up to 15 hours.
-Fixed npcs & monsters glitching through walls / over moats if they had a path calculated before the wall/moat appeared (they'll still walk up to it though)
-Fixed an issue where crops would mysteriously reappear to continue growing after being removed combined with a server restart
-Extended the green area of banners by 40 cm to indicate the previously half-green half-red block is safe
-Fixed an issue with the "height" at which npc's stand on top of non-block-sized types.
| They'll stand/walk at the height returned by sweeping a box sized (0.25, 0.25, 0.25) through the boxcolliders from the middle-top straight down
-Slightly improved collision detection during low framerates
-Fixed a rare server error which breaks chunk loading (happens when 2 or more players queue up an already loaded chunk at the same time)
-Discard cached files on the server if the player connected in singleplayer mode (saves ~35 MB of ram from ~135 to ~100)
-Improved JSON string (un)escape handling. Now only does it on read/write to disk, instead of upon SetAs/GetAs
-Added string interning for parsed JSON (RAM on mega world before: 3150 MB, after: 2843 MB)

Modding changes:
-Updated gamedata/help/ with a types.txt to describe the keys available to use in types.json
-Removed NPC.Job; was only used by DefaultFarmerAreaJob<T>. Get/reuse code from the job types available in the APIProvider mod included instead
-Added IAreaJob.AreaType, to indicate whether the area should show a 2d or 3d frame in the client
-Added IAreaJob.IsValid, to indicate whether this area his been removed (to check invalidated references)
-Added bool AreaJobTracker.ExistingAreaAt (min, max, out List<jobs>)
| Get a list of areas overlapping the area between min and max
| Optionally return the List<jobs> to AreaJobTracker.AreaJobListPool when you're done with it
-Pipliz.Helpers.IOHelper.CreateDirectoryFromFile now doesn't error if there's no directory in the path (will return null though)
-The JSON Deserialize methods now have a bool option "stringInterning", defaults to true.
| Set it to false if the json you're loading has lots of unique string data that isn't stored for the duration of the game
-ThreadedObjectPool<T> constructor function is now optional, will fallback to Activator.CreateInstance<T>()
-Merged ServerManager.TryChangeBlock, ServerManager.TryChangeBlockUserRequest and ServerManager.TryChangeBlockUserRequest
| Mainly changed so that diggers can be limited by anti-grief
| See updated mod_callbacks.txt on OnTryChangeBlock
| Changed OnTryChangeBlockUser callback from "bool OnTryChangeBlockUser" to "void OnTryChangeBlock"
| Removed OnTryChangeBlockUserRequest callback (merged into OnTryChangeBlock)
| OnTryChangeBlock now receives callbacks for game caused changes (water spreading, leaves removal)
| ServerManager.TryChangeBlock now has an optional causingPlayers argument
| Removed SetBlockFlags.SendToPlayers (since it's basically useless to change blocks on the server without sending it to players)
| Substantially changed OnTryChangeBlockUserData (and renamed to OnTryChangeBlockData)
-Changed IMonster.OnHit(damage) to take optional arguments for damage source and damage source type.
-Changed OnMonsterHit callback to be of type Action<IMonster, ModLoader.OnHitData>
| See updated mod_callbacks.txt on OnMonsterHit
-Changed NPC.NPCBase.OnHit(damage) to take optional arguments for damage source and damage source type.
-Changed OnNPCHit callback to be of type Action<NPC.NPCBase, ModLoader.OnHitData>
| See updated mod_callbacks.txt on OnNPCHit
-Changed Players.TakeHit (Players.Player, float, bool = false)
| sendToPlayer argument is removed, was always true (why take damage and not send it to the user)
| Added optional arguments for damage source and damage source type
-Changed OnPlayerHit callback to be of type Action<Players.Player, ModLoader.OnHitData>
| See updated mod_callbacks.txt on OnPlayerHit
-Added support for 4th version digit (Major.Minor[.Build[.Revision]], -1 = unused digit)
| Added version.IsSubVersionOf(other) to check for subversions (i.e, other revision count if checking against x.x.x, or other build count if checking against x.x are allowed)
-Changed "boxColliders" format used in types.json - see "colliders" at end of gamedata/help/types.txt
-Removed outdated/unused World.CanSee() method
-Added type.BlocksPathing, type.CollidePlayer, type.CollideSelection - see gamedata/help/types.txt
-Added a setter to ScientistJob.CraftingCooldown
-Added a MiningCooldown property to the MinerJob
-Made some fields public in the MinerJob
-"renderOnlyIfSelected" types will now render if the player is actively hitting them
-Removed Shared.EAreaType.TwoD, only ThreeD and ThreeDActive now
