0.3.1 (2017-**-**)
-Added 3 new researches, to unlock the tailor, technologist and life science bags.
-Moved nearly all gamedata files to the server, to allow for a better modded server experience. (no need for clients to install files)

-Fixed colonists only eating from bread if there's enough of it. Now it'll balance between food types (trying to keep total food value equal between stacks)
-Fixed an issue with recipe limits being shared for all recipes with the same outcome (i.e, taiga logs -> planks & temperate logs -> planks)
-Fixed an issue where the game would not properly use it's gamedata directory if launched from with a non-standard working directory
-Fixed an issue where players would connect longer/deeper than desired when they are refused for any reason
-Fixed a bug in the pathfinding precalculation where it may fail to mark some positions as traversable
-Updated Unity version from 5.6.2f1 to 5.6.3p2 fixing various issues (& a 40 MB memory leak)
-Fixed an issue with the client not properly receiving the disconnect packet when kicked

-Tweaked scroll sensitivity for the stockpile, crafting menu, science menu and crafting limits menu
-Optimized the chunk updater, significantly reducing the performance cost of active chunks
--Active chunks are checked a lot less when they're active due to a banner
--Autosaving checks are now seperate from unloading checks
-Optimized the AI path precalculation - it takes about 40% of the time it used to (lowered cpu load of server upon moving / loading)
-Added compression to the servers' voxel data per chunk (saves up to 50%-ish of RAM)
-Optimized torch rendering; reduced time to render for torches by 33-90% depending on scenario. Improves fps in tests by between 0 & ~20%

-Added "name" keys to modInfo.json
-Added "compatibleversions" key to modInfo.json, to indicate supported versions of the mod
-Allow torches to be added to any block
-Added jsonnode.TryGetAsOrDefault - returns found value if it exists, default if it doesn't.
-Added InventoryItem(string) constructor
-Changed various name, methods and classes related to Recipes to support adding recipes through researchables
--Recipes now have a unique name and default limit per recipe
--Recipes can now be 'optional', which have to be unlocked through code ingame.
-Serialize the WorldSettings after the default inventory / stockpile contents are added upon first launch (instead of before those are added)
-Removed AfterDefiningNPCTypes callback - use AfterItemTypesServer with providesfor/dependson with pipliz.server.loadnpctypes / pipliz.server.loadmonstertypes callbacks
-Fixed errors upon loading .obj without a uv channel (use default vertex / uv when out of range)
-Automatically send a correction to the user from TryChangeBlockUser if the TypeToBuild is changed