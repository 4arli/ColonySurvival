The example mod contains two parts:

1) A block (ExampleBlock1) you can place, which turns into another block after 5 seconds (ExampleBlock2)
2) A chatcommand, /played, which sends you the length of your current session and total time played in this world.

How to enable the Example dll;
-Set "enabled" : true in the modInfo.json
-Launch the server

To build the Example dll;
-Create a new project in visual studio or some other
-Change .NET framework to 3.5
-Move ExampleClass.cs into it (or create it over it, whichever works)
-Add references to "colonyserver_Data\managed\Assembly-CSharp.dll", and probably UnityEngine.dll (.ui) from the same folder.
-Build it
-Move the built dll to the desired locations (\mods\Pipliz\Example\Example.dll)
-Set "enabled" : true in the modInfo.json
-Launch the server
-It hopefully works

The game searches for all "modInfo.json" files in gamedata\mods\.
It then loops over all objects in the "assemblies" array inside of it, loading all dll paths (relative to the modInfo.json's location) if "enabled" is true.
Every type of the loaded assembly is checked if it has the attribute "ModLoader.ModManager" defined, which can be found in the Assembly-CSharp.dll library.
If it is defined, it checks all methods for one that has the ModCallback attribute.
Methods which define that attribute (with a value other than none) are added to a list internally.
This list is used later on at various moments to trigger these methods at certain points.

The first 'paragraph' will be called in order:
AfterStartup			- void () 			- At the end of the startup code, first callback to happen. Use this for basic initialization
AfterSelectedWorld		- void () 			- At the start of the loading world method. ServerManager.WorldName is set, savegames/serverLock is created. The place to add actions to ItemTypes.On* lists.
AfterDefiningNPCTypes	- void ()			- After default npc types are defined, use the NPC.NPCType static functions here to register other npc types
AfterAddingBaseTypes	- void ()			- Loaded the worlds' index lookup table, called ItemTypes.OnBeforeLoadingTypes. The place to call ItemTypes.AddRawType() to add types.json nodes.
AfterItemTypesDefined	- void () 			- Do things that require all itemtypes to be defined here.
AfterItemTypesServer	- void ()			- Place to override itemtypesserver actions.
AfterWorldLoad			- void () 			- All misc data is loaded (recipes, structures, npc's, player data, all that)
AfterNetworkSetup		- void () 			- After the NetworkWrapper class is loaded. Can take a few seconds for steam servers - it's after port forwarding etc is done on another thread.
			
OnUpdateStart			- void () 			- Start of Unity's Update loop, before anything is called (except for quitting mechanisms).
OnUpdate				- void () 			- Just after OnUpdateStart, after the ThreadManager did main thread delegates. Probably the place to put the bulk of per-frame-updates.
OnUpdateEnd				- void () 			- Just before the end of the update loop (after all relevant gamecode)
OnGUI					- void ()			- Unity's legacy GUI loop - use UnityEngine.GUI calls here.
OnFixedUpdate			- void () 			- Unity's FixedUpdate loop
OnLateUpdate			- void () 			- Unity's LateUpdate loop (comes after Update and some unity internal things)
OnApplicationFocus		- void (bool a)		- Unity's OnApplicationFocus method.
OnApplicationPause		- void (bool b)		- Unity's OnApplicationPause method (probably unused, as the game does not have proper support for this, but hey here is an entry)
OnPlayerConnected		- void (Player p)	- A player connected to the server
OnPlayerDisconnected	- void (Player p)	- A player disconnected from the server
OnSavingPlayer			- void (JSONNode n, Player p) - A player is being saved
OnLoadingPlayer			- void (JSONNode n, NetworkID i) - A player is being loaded
OnQuitEarly				- void ()			- General.Application.OnQuit @ -200, called before all other on quit actions
OnQuit					- void ()			- General.Application.OnQuit @ 0, after players are disconnected
OnQuitLate				- void ()			- General.Application.OnQuit @ 100, after most quit actions happened
OnPlayerMoved			- void (Player p)	- A player sent an updated position. New position / y angle can be gotten via the parameter

The following 'paragraph' callbacks are all called from the filesaver thread. Be careful with multithreading, a significant portion of the game is not threadsafe.

OnSavedRegionToDisk		- void (FileSaver.FileRegion r)				- A region is saved to the disk
OnLoadedRegionFromDisk	- void (FileSaver.FileRegion r)				- A region is loaded from the disk.
OnSavedChunkToRegion	- void (FileSaver.FileRegion r, Chunk c)	- A chunk is saved to the region. The chunk is locked for reading data.
OnLoadedChunkFromRegion - void (FileSaver.FileRegion r, Chunk c)	- A chunk is filled from a region in memory. The chunk is locked for writing data.

Most interesting mods will probably be based on using these game classes:

-ItemTypes.AddRawType				- @ AfterAddingBaseTypes, register a new type as if it's in types.json
-ChatCommands.CommandManager.RegisterCommand - To register chat commands for callbacks (anywhere).
-ServerManager.TrySetBlock			- Change the blocktype at a certain position (includes sending to players, triggering OnChange callbacks on top of World.TrySetTypeAt + ServerManager.SendBlockChange). Use post world load.
-World.TryGetTypeAt					- Get the type at a certain position - use post world load
-ItemTypesServer.RegisterType 		- For receiving callbacks for where certain blocks are placed/removed/changed/updated near and by who - @ AfterItemTypesServer
-Pipliz.Chatting.Chat.Send			- To send chat messages to players
-Players.Send*						- Primary function to send data to all / some close by players.
-NetworkWrapper.Send*				- Primary function to send data to a specific players.
-Stockpile.GetStockPile				- Get the stockpile for fiddling
-UpdatableBlocks.BlockTracker		- Possible used for custom updatable/growable plants, check the other implementations
-PermissionsManager					- Check if someone has some permission
-Recipe*							- Classes with all crafting recipes & some helper functions to fiddle with them. - @ AfterWorldLoad
-General.Physics.Physics.CanSee 	- A method to see if source can see goal.
-BlockTypes.Builtin.BuiltinBlocks 	- Some builtin blocks, probably not exhaustive at the moment of writing, @ AfterItemTypesDefined
-AI.PathFinder(.TryFindPath)		- Class to try and find a path between A & B. Requires quite some care to work properly.
-TimeCycle							- Class that manages the ingame time (mostly just day & night, rest is Pipliz.Time)
-Pipliz.*							- Mostly helper classes that are not strictly tied to the game
-Pipliz.Time						- Tracks some times for cooldowns etc (cooldowns themselves are all over, but they're based on this)
-Pipliz.Log							- Multithreaded log writing, writes to both the UI log & the unity file log.
-Pipliz.Random						- Wrapper around System.Random to make it work with multiple threads (probably sort of slow)
-Pipliz.Math						- Who doesn't want their own math library (with the bugs that come with it)
-Pipliz.JSON						- Who doesn't want their own json library (with the bugs that come with it)
-Pipliz.ByteBuilder					- Class to write comfortably into a byte[] buffer without creating much more garbage than the final byte[] buffer.
-Pipliz.ByteReader 					- Class to read comfortably from a byte[] buffer
-Pipliz.Vector3Int					- Vector3 class using ints. Used for chunk positions, block position, other positions generally.
-Pipliz.Vector3Byte					- Vector3 class using sbytes. Mostly used for local chunk positions
-Pipliz.Threading.ThreadManager 	- Helper to queue delegates onto the main thread (possibly at a later interval) because 80%+ of the game isn't threadsafe.
-Pipliz.Noise						- Some noise functions (un)used (only OpenSimplexNoise is used)

Things that are probably too hard coded to be very useful at this moment:

-TerrainGenerator
-Most of the AI namespace.
-Most of the NPC namespace.
-Most of the jobs/areas (no namespace, FurnaceJob etc).
-Structures ?
-Filesaver class
-Colony class
-Chunk class

I apologize for the very inconsistent namespacing and general code quality. Part of the project is up to 2-3 years old, where I was even more of a beginner programmer.
I've gone through some phases & every phase thought "oh but this is the way it should be done", and suddenly every part of the game is written in a different style. But such is life at the beginning.
There's also random dead code / unused-semi-build features, because of shifting priorities.